var Number setGFCurrentTemp = 17
var Number setFFCurrentTemp = 17
var Number antiFreezeTemp = 7
var Number defaultWinterTemp = 20

val analyzeTemperature = [ GenericItem pump, GenericItem temperatureItem, Number currentSetpoint | 
    val currentTemp = temperatureItem.state

    var pumpState = pump.state
    logInfo("temperature", "PUMP State: {}, SetTemp: {},  CurrentTemp: {}", pumpState, currentSetpoint, currentTemp)

    if(currentTemp < currentSetpoint && pumpState == OFF) {
        logInfo("temperature", "Switching ON PUMP.")
        sendCommand(pump, ON)
    } else if (currentTemp > currentSetpoint && pumpState == ON) {
        logInfo("temperature", "Switching OFF PUMP.")
        sendCommand(pump, OFF)
    } else {
        logInfo("temperature", "No Temp action taken.")
    }
]

val updateSetpoint = [ GenericItem setpointShiftItem, Number currentSetpoint | 
    val setIncreaseOrDecrease = setpointShiftItem.state
    logInfo("temperature", "Update Setpoint: {}", setIncreaseOrDecrease)

    if(setIncreaseOrDecrease == 1) {
        currentSetpoint + 0.1
    } else {
        currentSetpoint - 0.1
    }
]

rule "KNX Send Day/Night"
when
	Item GF_SWITCH_LIVING_DATETIME received update
then
    val day_start = (SunriseTime.state as DateTimeType).getZonedDateTime()
    val evening_start = (SunsetTime.state as DateTimeType).getZonedDateTime()

    if (now.isAfter(evening_start) || now.isBefore(day_start)) {
        sendCommand(DayModeSwitch, OFF)
    } else {
        sendCommand(DayModeSwitch, ON)
    }
end

rule "FF temperature updated"
when
	Item FF_FamilyRoom_Temperature received update
then
    analyzeTemperature.apply(HEAT_FFPump, FF_FamilyRoom_Temperature, setFFCurrentTemp)
end

rule "FF temperature SetPoint"
when
	Item FF_Temp_Setpoint_Shift received update
then
    setFFCurrentTemp = updateSetpoint.apply(FF_Temp_Setpoint_Shift, setFFCurrentTemp)
    logInfo("temperature", "FF Setpoint: {}", setFFCurrentTemp)
    sendCommand(FF_Heating, setFFCurrentTemp)
end


rule "FF Update Current Setpoint"
when
	Item FF_Heating received update
then
    setFFCurrentTemp = FF_Heating.state
    logInfo("temperature", "FFTemperature change: {}", setFFCurrentTemp)
    sendCommand(FF_Temp_Current_Setpoint, setFFCurrentTemp)
    analyzeTemperature.apply(HEAT_FFPump, FF_FamilyRoom_Temperature, setFFCurrentTemp)
end

rule "GF temperature updated"
when
	Item GF_Temperature received update
then
    analyzeTemperature.apply(HEAT_GFPump, GF_Temperature, setGFCurrentTemp)
end

rule "GF temperature SetPoint"
when
	Item GF_Temp_Setpoint_Shift received update
then

    setGFCurrentTemp = updateSetpoint.apply(GF_Temp_Setpoint_Shift, setGFCurrentTemp)
    logInfo("temperature", "GF Setpoint: {}", setGFCurrentTemp)
    sendCommand(GF_Heating, setGFCurrentTemp)
end

rule "GF Update Current Setpoint"
when
	Item GF_Heating received update
then
    setGFCurrentTemp = GF_Heating.state
    logInfo("temperature", "GFTemperature change: {}", setGFCurrentTemp)

    sendCommand(GF_Temp_Current_Setpoint, setGFCurrentTemp)
    analyzeTemperature.apply(HEAT_GFPump, GF_Temperature, setGFCurrentTemp)
end

rule "Antifreeze update"
when
	Item HEAT_AntiFreeze received update
then
    if(HEAT_AntiFreeze.state == ON) {
        logInfo("temperature", "AntiFreeze is ON. Setting temp to: {}", antiFreezeTemp)
        sendCommand(GF_Heating, antiFreezeTemp)
        sendCommand(FF_Heating, antiFreezeTemp)
    } else {
        logInfo("temperature", "AntiFreeze is OFF. Setting temp to: {}", defaultWinterTemp)
        sendCommand(GF_Heating, defaultWinterTemp)
        sendCommand(FF_Heating, defaultWinterTemp)
    }
end

rule "Check Heating items"
when
	Time cron "0 0/1 * * * ?"
then
    if(HEAT_AntiFreeze.state == ON) {
        logInfo("temperature", "AntiFreeze is ON. Setting temp to: {}", antiFreezeTemp)
        sendCommand(GF_Heating, antiFreezeTemp)
        sendCommand(FF_Heating, antiFreezeTemp)
    } else {
        logInfo("temperature", "Checking heating: GF State: {}, FF State: {}", GF_Heating.state, FF_Heating.state)
        if(GF_Heating.state == NULL || GF_Heating.state < setGFCurrentTemp) {
            logInfo("temperature", "GF_Heating is NULL. Setting temp to: {}", setGFCurrentTemp)
            sendCommand(GF_Heating, setGFCurrentTemp)
        }

        if(FF_Heating.state == NULL || FF_Heating.state < setFFCurrentTemp) {
            logInfo("temperature", "FF_Heating is NULL. Setting temp to: {}", setFFCurrentTemp)
            sendCommand(FF_Heating, setFFCurrentTemp)
        }
    }
end